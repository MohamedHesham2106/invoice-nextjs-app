// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id               String   @id @default(cuid())
  senderStreet     String
  senderCity       String
  senderPostalCode String
  senderCountry    String
  clientName       String
  clientEmail      String
  clientStreet     String
  clientCity       String
  clientPostalCode String
  clientCountry    String
  createdAt        DateTime @default(now())
  paymentDue       DateTime
  paymentTerms     String
  description      String
  status           status
  total            Int
  items            Items[]
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
}

model Items {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String
  quantity  Int
  name      String
  price     Int
  total     Int
}

enum status {
  draft
  pending
  paid
}
